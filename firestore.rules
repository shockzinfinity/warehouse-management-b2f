rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // match /{document=**} {
    //   allow read, write: if false;
    // }
    match /users/{userId} {
      allow read: if (request.auth != null && request.auth.uid == userId) || approvedLevel(0)
      allow update: if (request.auth != null && request.auth.uid == userId && resource.data.level == request.resource.data.level) || approvedLevel(0)
      allow create, delete: if false // functions 에서 하고 있으므로
    }
    function approvedLevel (level) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.level <= level
    }
    match /boards/{boardId} {
      allow read: if true
      // 게시판 생성은 admin 만
      allow create: if approvedLevel(0)
      // 수정은 create + 자기자신
      allow update: if approvedLevel(0) || resource.data.uid == request.auth.uid
      allow delete: if approvedLevel(0) || resource.data.uid == request.auth.uid
      match /articles/{articleId} {
        function incrementArticleCount (before, after) {
          return before.url == after.url &&
                before.createdAt == after.createdAt &&
                before.updatedAt == after.updatedAt &&
                before.title == after.title &&
                before.uid == after.uid &&
                before.user.displayName == after.user.displayName &&
                before.user.email == after.user.email &&
                before.user.photoURL == after.user.photoURL &&
                (before.readCount != after.readCount || before.likeCount != after.likeCount || before.likeUids != after.likeUids)
        }
        allow read: if true
        allow create: if approvedLevel(5)
        allow update: if approvedLevel(0) || resource.data.uid == request.auth.uid || incrementArticleCount(resource.data, request.resource.data)
        allow delete: if approvedLevel(0) || resource.data.uid == request.auth.uid
        match /comments/{commentId} {
          function incrementCommentCount (before, after) {
            return before.comment == after.comment &&
                  before.createdAt == after.createdAt &&
                  before.updatedAt == after.updatedAt &&
                  before.uid == after.uid &&
                  before.user.displayName == after.user.displayName &&
                  before.user.email == after.user.email &&
                  before.user.photoURL == after.user.photoURL &&
                  (before.likeCount != after.likeCount || before.likeUids != after.likeUids)
          }
          allow read: if true
          allow create: if approvedLevel(5)
          allow update: if approvedLevel(0) || resource.data.uid == request.auth.uid || incrementCommentCount(resource.data, request.resource.data)
          allow delete: if approvedLevel(0) || resource.data.uid == request.auth.uid
        }
      }
    }
    match /racks/{rackId} {
      function incrementRackCount (before, after) {
        return before.coverUrl == after.coverUrl &&
                before.qrCodeUrl == after.qrCodeUrl &&
                before.rackId == after.rackId &&
                before.createdAt == after.createdAt &&
                before.updatedAt == after.updatedAt &&
                before.description == after.description &&
                before.title == after.title &&
                before.position == after.position &&
                before.uid == after.uid &&
                (before.likeCount != after.likeCount || before.likeUids != after.likeUids)
      }
      allow read: if true
      allow create: if approvedLevel(0)
      allow update: if approvedLevel(0) || resource.data.uid == request.auth.uid || incrementRackCount(resource.data, request.resource.data)
      allow delete: if approvedLevel(0) || resource.data.uid == request.auth.uid
    }
    match /boxes/{boxId} {
      function incrementBoxCount (before, after) {
        return before.coverUrl == after.coverUrl &&
                before.qrCodeUrl == after.qrCodeUrl &&
                before.boxId == after.boxId &&
                before.parentRackId == after.parentRackId &&
                before.createdAt == after.createdAt &&
                before.updatedAt == after.updatedAt &&
                before.description == after.description &&
                before.title == after.title &&
                before.uid == after.uid &&
                before.user.createdAt == after.user.createdAt &&
                before.user.level == after.user.level &&
                before.user.displayName == after.user.displayName &&
                before.user.email == after.user.email &&
                before.user.photoURL == after.user.photoURL &&
                (before.likeCount != after.likeCount ||
                  before.likeUids != after.likeUids)
      }
      allow read: if true
      allow create: if approvedLevel(5)
      allow update: if approvedLevel(0) || resource.data.uid == request.auth.uid || incrementBoxCount(resource.data, request.resource.data)
      allow delete: if approvedLevel(0) || resource.data.uid == request.auth.uid
      match /samples/{sampleId} {
        function incrementSampleCount (before, after) {
          return before.url == after.url &&
                  before.qrCodeUrl == after.qrCodeUrl &&
                  before.createdAt == after.createdAt &&
                  before.updatedAt == after.updatedAt &&
                  before.title == after.title &&
                  before.uid == after.uid &&
                  before.user.displayName == after.user.displayName &&
                  before.user.email == after.user.email &&
                  before.user.photoURL == after.user.photoURL &&
                  (before.readCount != after.readCount ||
                    before.currentStock != after.currentStock ||
                    before.likeCount != after.likeCount ||
                    before.likeUids != after.likeUids)
        }
        allow read: if true
        allow create: if approvedLevel(5)
        allow update: if approvedLevel(0) || resource.data.uid == request.auth.uid || incrementSampleCount(resource.data, request.resource.data)
        allow delete: if approvedLevel(0) || resource.data.uid == request.auth.uid
        match /comments/{commentId} {
          function incrementCommentCount (before, after) {
            return before.comment == after.comment &&
                  before.createdAt == after.createdAt &&
                  before.updatedAt == after.updatedAt &&
                  before.uid == after.uid &&
                  before.user.displayName == after.user.displayName &&
                  before.user.email == after.user.email &&
                  before.user.photoURL == after.user.photoURL &&
                  (before.likeCount != after.likeCount || before.likeUids != after.likeUids)
          }
          allow read: if true
          allow create: if approvedLevel(5)
          allow update: if approvedLevel(0) || resource.data.uid == request.auth.uid || incrementCommentCount(resource.data, request.resource.data)
          allow delete: if approvedLevel(0) || resource.data.uid == request.auth.uid
        }
        match /histories/{historyId} {
          allow read: if true
          allow create: if approvedLevel(5)
          allow update, delete: if approvedLevel(0)
        }
      }
    }
  }
}